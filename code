from telnetlib import STATUS
import cv2, time, pandas
from datetime import datetime
import imutils
import numpy as np
import argparse
def detect(frame):
    bounding_box_cordinates, weights =  HOGCV.detectMultiScale(frame, winStride = (4, 4), padding = (8, 8), scale = 1.03)
    person = 0
    for x,y,w,h in bounding_box_cordinates:
        cv2.rectangle(frame, (x,y), (x+w,y+h), (0,255,0), 2)
        cv2.putText(frame, f'person {person}', (x,y), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0,0,255), 1)
        person += 1
    cv2.putText(frame, 'Status : Detecting ', (40,40), cv2.FONT_HERSHEY_DUPLEX, 0.8, (255,0,0), 2)
    cv2.putText(frame, f'Total Persons : {person}', (40,70), cv2.FONT_HERSHEY_DUPLEX, 0.8, (255,0,0), 2)
    cv2.imshow('output', frame)
    return frame
def detectByCamera(writer):   
    first_frame=None
    status_list=[None,None]
    times=[]
    df=pandas.DataFrame(columns=["Start","End"])
   
    video = cv2.VideoCapture(0)
    print('Detecting people...')
    
    while True:
        check, frame = video.read()
        status=0
        gray=cv2.cvtColor(frame,cv2.COLOUR_BGR2GRAY)
        gray=cv2.GaussianBlur(gray,(21,21),0)
        
        frame = detect(frame)
        
        if writer is not None:
            writer.write(frame)
        key = cv2.waitKey(1)
        if key == ord('q'):
                break
    video.release()
    cv2.destroyAllWindows()
def humanDetector(args):
    if str(args["camera"]) == 'true' : camera = True 
    else : camera = False
    writer = None
    if camera:
        print('[INFO] Opening Web Cam.')
        detectByCamera(writer)
def argsParser():
    arg_parse = argparse.ArgumentParser()
    arg_parse.add_argument("-c", "--camera", default=False, help="Set true if you want to use the camera.")
    arg_parse.add_argument("-o", "--output", type=str, help="path to optional output video file")
    args = vars(arg_parse.parse_args())
    return args
if __name__ == "__main__":
    HOGCV = cv2.HOGDescriptor()
    HOGCV.setSVMDetector(cv2.HOGDescriptor_getDefaultPeopleDetector())

    args = argsParser()
    humanDetector(args)
